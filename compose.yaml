services:
  server:
    image: nyvek/server-novidadescripto
    depends_on:
      - db
    build:
      context: .
    environment:
      NODE_ENV: production
      GOOGLE_CX: 8783c427bbca84c41
      GOOGLE_AUTH: AIzaSyAbs6cnbj6BWQ-JDiTZWJJlTX09k-U8MJg
      PRIVATE_KEY: AIzaSyAbs6cnbj6BWQ-JDiTZWJJlTX09k-U8MJg
      PUBLIC_TOKEN: 86934993-b5f1-4691-83a4-2a3c35fe139f
      NEWS_URLS: 'https://investnews.com.br/criptonews/*,https://www.infomoney.com.br/onde-investir/*,https://www.criptofacil.com/*'
      DATABASE_URL: "mysql://root:root@db:3306/newscripto"
    ports:
      - 3001:3001
  db:
    image: mysql:8.0.30-debian
    environment:
      MYSQL_ROOT_PASSWORD: root
      MYSQL_DATABASE: newscripto
    ports:
      - 3306:3306
    volumes:
      - ./.docker/dbdata:/var/lib/mysql
  

# The commented out section below is an example of how to define a PostgreSQL
# database that your application can use. `depends_on` tells Docker Compose to
# start the database before your application. The `db-data` volume persists the
# database data between container restarts. The `db-password` secret is used
# to set the database password. You must create `db/password.txt` and add
# a password of your choosing to it before running `docker-compose up`.
#     depends_on:
#       db:
#         condition: service_healthy
#   db:
#     image: postgres
#     restart: always
#     user: postgres
#     secrets:
#       - db-password
#     volumes:
#       - db-data:/var/lib/postgresql/data
#     environment:
#       - POSTGRES_DB=example
#       - POSTGRES_PASSWORD_FILE=/run/secrets/db-password
#     expose:
#       - 5432
#     healthcheck:
#       test: [ "CMD", "pg_isready" ]
#       interval: 10s
#       timeout: 5s
#       retries: 5
# volumes:
#   db-data:
# secrets:
#   db-password:
#     file: db/password.txt

